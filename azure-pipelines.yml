trigger:
- master

schedules:
- cron: "0 0 * * *"
  displayName: 'Overnight build'
  branches:
    include:
    - master
  always: true

jobs:
- job: Performance
  timeoutInMinutes: 0
  
  strategy:
    matrix:
      macOS x64:
        poolname: 'Mac'
        os: 'osx'
        architecture: 'x64'
        include_coreclr: true
        include_monollvmjit: true
        include_monojit: true
      Linux arm64:
        poolname: 'AWS'
        os: 'linux'
        architecture: 'arm64'
        include_coreclr: true
        include_monollvmjit: true
        include_monojit: false

  pool:
    name: $(poolname)

  variables:
    filter: '--filter Burgers' # '--anyCategories runtime'

  steps:
  - script: |  
      brew update
      brew install autoconf automake libtool gnu-sed ninja cmake || true
      brew upgrade autoconf automake libtool gnu-sed ninja cmake || true
    condition: and(succeeded(), eq(variables['os'], 'osx'))
    displayName: 'Prepare OSX dependencies'
  - script: |
      git clean -ffxd
      mkdir work
      git clone --depth 1 https://github.com/dotnet/runtime.git work/runtime
      git clone --depth 1 https://github.com/dotnet/performance.git work/performance
      cd work/performance
      git remote add filipnavara https://github.com/filipnavara/performance.git
      git fetch filipnavara
      git cherry-pick d1768c7f
    displayName: 'Clone repositories'
  - script: |
      cd work/runtime
      ./build.sh -c Release /p:MonoEnableLlvm=true
    displayName: 'Build CoreCLR, Mono and Libraries'
  - script: |
      TESTHOST_NAME=`ls work/runtime/artifacts/bin/testhost/`
      RUNTIME_CONFIGURATION=`ls work/runtime/artifacts/bin/mono/`
      cp -r work/runtime/artifacts/bin/testhost/${TESTHOST_NAME}/ work/coreclr-testhost/
      cp -r work/runtime/artifacts/bin/testhost/${TESTHOST_NAME}/ work/mono-testhost/
      cp work/runtime/artifacts/bin/mono/$(RUNTIME_CONFIGURATION)/* work/mono-testhost/shared/Microsoft.NETCore.App/5.0.0/
    displayName: 'Prepare test hosts'
  - script: |
      work/coreclr-testhost/dotnet run --project work/performance/src/benchmarks/micro/ -f netcoreapp5.0 -c Release --cli work/coreclr-testhost/dotnet --artifacts work/results-coreclr $(filter)
    condition: and(succeeded(), eq(variables['include_coreclr'], true))
    displayName: 'Build and run microbenchmarks (CoreCLR)'
  - publish: work/results-coreclr
    artifact: $(os)_$(architecture)_coreclr
    condition: and(succeeded(), eq(variables['include_coreclr'], true))
    displayName: 'Publish CoreCLR results'
  - script: |
      MONO_BDN_ENV_OPTIONS="--llvm" work/mono-testhost/dotnet run -f netcoreapp5.0 -c Release --cli work/mono-testhost/dotnet --artifacts work/results-mono-llvm $(filter)
    condition: and(succeeded(), eq(variables['include_monollvmjit'], true))
    displayName: 'Build and run microbenchmarks (Mono+LLVM)'
  - publish: work/results-mono-llvm
    artifact: $(os)_$(architecture)_monollvmjit
    condition: and(succeeded(), eq(variables['include_monollvmjit'], true))
    displayName: 'Publish Mono+LLVM results'
  - script: |
      work/mono-testhost/dotnet run -f netcoreapp5.0 -c Release --cli work/mono-testhost/dotnet --artifacts work/results-mono $(filter)
    condition: and(succeeded(), eq(variables['include_monojit'], true))
    continueOnError: true
    displayName: 'Build and run microbenchmarks (Mono)'
  - publish: work/results-mono
    artifact: $(os)_$(architecture)_monojit
    condition: and(succeeded(), eq(variables['include_monojit'], true))
    continueOnError: true
    displayName: 'Publish Mono results'
  - script: |
      PERFLAB_TARGET_FRAMEWORKS=netcoreapp5.0 work/coreclr-testhost/dotnet run --project work/performance/src/tools/ResultsComparer/ -f netcoreapp5.0 --base work/results-coreclr/ --diff work/results-mono-llvm/ --threshold 5% --xml work/diff-coreclr-mono-llvm.xml
    condition: and(succeeded(), eq(variables['include_coreclr'], true), eq(variables['include_monollvmjit'], true))
    displayName: 'Compare results (baseline: CoreCLR, diff: Mono+LLVM)'
  - script: |
      PERFLAB_TARGET_FRAMEWORKS=netcoreapp5.0 work/coreclr-testhost/dotnet run --project work/performance/src/tools/ResultsComparer/ -f netcoreapp5.0 --base work/results-coreclr/ --diff work/results-mono/ --threshold 5% --xml work/diff-coreclr-mono.xml
    condition: and(succeeded(), eq(variables['include_coreclr'], true), eq(variables['include_monojit'], true))
    displayName: 'Compare results (baseline: CoreCLR, diff: Mono)'
  - script: |
      PERFLAB_TARGET_FRAMEWORKS=netcoreapp5.0 work/coreclr-testhost/dotnet run --project work/performance/src/tools/ResultsComparer/ -f netcoreapp5.0 --base work/results-mono/ --diff work/results-mono-llvm/ --threshold 5% --xml work/diff-mono-mono-llvm.xml
    condition: and(succeeded(), eq(variables['include_monojit'], true), eq(variables['include_monollvmjit'], true))
    displayName: 'Compare results (baseline: Mono, diff: Mono+LLVM)'
    
